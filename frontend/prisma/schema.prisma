generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String   @unique
  birthDate   DateTime
  password    String
  address     Json?
  token       String?
  otp         String?
  deviceToken String?
  gender      String
  role        String   @default("customer")

  orders        Order[]
  notifications Notification[] @relation("userNotifications")

  image      String?
  agreeTerms Boolean  @default(false)
  updatedAt  DateTime @default(now())
  createdAt  DateTime @default(now())
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  description String
  price       Float
  prices      Json
  extras      Json
  images      Json
  thumbnail   String   @default("")
  discount    Float
  stockCount  Int
  stockStatus Int
  status      Boolean  @default(false)
  slug        String   @unique
  orders      Order[]  @relation("productOrders")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id      Int     @id @default(autoincrement())
  orderId String? @unique

  productId Int?
  product   Product? @relation("productOrders", fields: [productId], references: [id], onDelete: Cascade)

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  quantity      Int     @default(1)
  totalAmount   Decimal @db.Decimal(10, 2)
  paymentStatus Int     @default(0)
  orderStatus   Int     @default(0)

  payments      Payment[]      @relation("orderPayments")
  requests      Request[]      @relation("orderRequests")
  notifications Notification[] @relation("orderNotifications")

  details Json?

  shippingAddress String
  phoneNumber     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Refund    Refund[]
}

model Payment {
  id Int @id @default(autoincrement())

  orderId Int   @unique
  order   Order @relation("orderPayments", fields: [orderId], references: [id], onDelete: Cascade)

  paymentId String?
  type      String?
  status    Int     @default(0)

  amount   Decimal @db.Decimal(10, 2)
  currency String  @default("INR")

  provider String?
  method   String?

  responseCode    String?
  responseMessage String?
  captured        Boolean @default(false)

  paidAt    DateTime? @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Refund    Refund[]
}

model Request {
  id Int @id @default(autoincrement())

  orderId Int
  order   Order @relation("orderRequests", fields: [orderId], references: [id], onDelete: Cascade)

  type            Int     @default(0)
  status          Int     @default(0)
  responseMessage String?

  notifications Notification[] @relation("requestNotifications")
  refund        Refund? // optional one-to-one from request to refund

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id Int @id @default(autoincrement())

  type    Int    @default(0)
  message String
  status  Int    @default(0)

  orderId Int?
  order   Order? @relation("orderNotifications", fields: [orderId], references: [id], onDelete: Cascade)

  requestId Int?
  request   Request? @relation("requestNotifications", fields: [requestId], references: [id], onDelete: Cascade)

  userId Int?
  user   User? @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Refund {
  id       Int    @id @default(autoincrement())
  refundId String @unique

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  paymentId Int
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  requestId Int?     @unique
  request   Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)

  amount     Decimal   @db.Decimal(10, 2)
  mode       Int? // Manual = 0, Razorpay = 1, GPay = 2, etc.
  status     Int       @default(0) // 0 = pending, 1 = approved, 2 = rejected, 3 = refunded
  notes      String?
  refundDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
